#!/bin/bash

# Some documentations remains here.
# TODO


# SANITY CHECKS
#

# Permissions

# Some values
DEFAULTMODE=""

if [ $(id -u) -ne 0 ]; then
	echo " [ ERROR ]: You need execution privileges to run this program"
	echo " [ YOU SHALL NOT PASS! ]"
	echo " Please run : "
	echo " sudo $(basename $0)"
	exit 1
fi

# Test arguments
if [ $# -ne 2 ] ; then
	echo " [ USAGE ] : $(basename $0) [aula1|aula2|aula3|aula4] NUM_PC"
	echo " [ example ] : $(basename $0) aula2 01"
	exit 1
fi

echo " * [ Firstboot of La Senia ] "

AULA=$1
NUMAULA=$2

case $AULA in
	aula1)
		echo " * Using settings for aula1 *"
		MYGW="192.168.1.254"
		MYMASK="255.255.255.0"
		MYNAME="aula1-client$NUMAULA"
		MYIP="192.168.0.$NUMAULA"
	;;
	aula2)
		echo " * Using settings for aula2 *"
		MYGW="192.168.2.254"
		MYMASK="255.255.255.0"
		MYNAME="aula2-client$NUMAULA"
		MYIP="192.168.2.$NUMAULA"

	;;
	aula3)
		echo " * Using settings for aula3 - Temporal *"
		MYGW="192.168.4.254"
		MYMASK="255.255.255.0"
		MYNAME="aula3-client$NUMAULA"
		MYIP="192.168.4.1$NUMAULA"
	;;
	aula4)
		echo " * Using settings for aula4 *"
		MYGW="192.168.4.254"
		MYMASK="255.255.255.0"
		MYNAME="aula4-client$NUMAULA"
		MYIP="192.168.4.$NUMAULA"
	;;
	*)
		echo " * UNKNOW AULA "
		exit 1
	;;

esac

# Por ahora se queda la Ip del servidor de Nagios por si acaso
SERVERIP="172.29.0.254"

echo "  * Name : $MYNAME"
echo "  * IP : $MYIP"
echo "  * Servidor : $SERVERIP"

echo " WORKING DIR : $TMP_DIR"

# Would be a good idea test if IP and names are in 
# corrects forms.
TPL_PATH="/usr/share/senia/firstboot/templates"
FILE_HOSTNAME="/etc/hostname"
TPL_HOSTNAME="$TPL_PATH/hostname.tpl"
TPL_HOSTS="$TPL_PATH/Hosts.tpl"
TMP_DIR=$(mktemp -d /tmp/firstboot.XXXXXX)
HOST=""
IFACE=$(ip addr | grep ^2 | cut -d " " -f2 | tr ":" " "| sed -e "s/ //g")




set_hostname(){
	# Set Hostname
	sed -e "s/_@_HOSTNAME_@_/$MYNAME/g" $TPL_HOSTNAME > $TMP_DIR/etc.hostname
}

set_hosts(){
	# Set Hosts
	sed -e "s/127.0.1.1.*/127.0.1.1\t$MYNAME/g" /etc/hosts > $TMP_DIR/etc.hosts
}

set_ocsinventory(){
	# Set OcsInventory
	echo "server=$SERVERIP" > $TMP_DIR/etc.ocsinventory.ocsinventory-agent.cfg
	echo "tag=$MYNAME" >> $TMP_DIR/etc.ocsinventory.ocsinventory-agent.cfg
}

set_nrpe(){
	# Set NRPE
	sed -e "s/_@_MYIP_@_/$MYIP/g;s/_@_SERVERIP_@_/$SERVERIP/g" "$TPL_PATH/nrpe.tpl" > $TMP_DIR/nrpe.tpl
}

set_IP(){
	# Set IP
	ifdown $IFACE
	systemctl stop networking
	systemctl disable network-manager.service || echo "No he podido hacer esta operacion (Desabilitado)"
	systemctl stop network-manager.service || echo "No he podido hacer esta operacion (Parar)"
	cp "$TPL_PATH/interfaces.final" /etc/network/interfaces
	sed -e "s/_@_IFACE_@_/$IFACE/g;s/_@_MYIP_@_/$MYIP/g;s/_@_MYMASK_@_/$MYMASK/g;s/_@_MYGW_@_/$MYGW/g" "$TPL_PATH/interface.tpl" > "/etc/network/interfaces.d/$IFACE.cfg"
	systemctl start networking
}

final_build(){
	# Hostname
	cp $TMP_DIR/etc.hostname /etc/hostname
	hostname -F /etc/hostname

	# Hosts
	cp $TMP_DIR/etc.hosts /etc/hosts

	# OCS Inventory	
	mkdir -p /etc/ocsinventory/
	cp $TMP_DIR/etc.ocsinventory.ocsinventory-agent.cfg /etc/ocsinventory/ocsinventory-agent.cfg


	# NRPE
	mkdir -p /etc/nagios/
	cp $TMP_DIR/nrpe.tpl /etc/nagios/nrpe.cfg
}



set_hostname
set_hosts
set_ocsinventory
set_nrpe
set_IP
final_build

exit 0
