#!/usr/bin/python
# Author: Angel Berlanas Vicente
# angel.berlanas@gmail.com

import cv2
import sys
import os
from PIL import Image, ExifTags
#from PIL.ExifTags import TAGS

# Algunos parametros que deben ser modificados via CLI
scaled_factor=7
cascPath="/usr/share/senia-non-essential-tools/haarcascade_frontalface.xml"

def showUsage():
	"""
	Usage of senia-image-toolbox
	"""
	print("\t[ USAGE ] : senia-image-toolbox [ -s| -r90| -r180 | -r270 | -c ] ImagePath [ -d ]")
	print("\t [OPTIONS]")
	print("\t -s\t Show the image as is")
	print("\t -r90\t Rotate the image 90 degrees")
	print("\t -r180\t Rotate the image 180 degrees")
	print("\t -r270\t Rotate the image 270 degrees")
	print("\t -c\t Create a carnet with all the faces in the image")
	print("\t -d\t POSITIONAL argument that enables DEBUG")

def sanityChecks(imagePath):
	"""
	Sanity Checks para asegurarnos que podemos ejecutar el script sin 
	problemas.
	"""
	if not os.path.exists(imagePath):
		print(" [ ERROR ] : La imagen no existe o no se puede leer")
		sys.exit(1)


def scaleImage(img,factor,debug=False):
	"""
	Escala la imagen a un factor
	Devuelve una imagen escalada
	"""
	newx, newy= img.shape[1]/scaled_factor,img.shape[0]/scaled_factor
	img_scaled = cv2.resize(img,(newx,newy))
	return img_scaled


def showImage(img,debug=False):
	"""
	Vamos a ir depurando el programa y devolver las diferentes opciones que 
	vamos necesitando, por ahora si le pasamos una opcion "-s" lo que haremos
	sera mostrar la imagen que ha sido indicada como argumento
	"""
	cv2.imshow("Image",img)
	cv2.waitKey(0)
	sys.exit(0)

def rotateByExif(imagePath,debug=False):
	"""
	Rotate the images if the Exif data 
	contains rotation information.
	"""
	try:
		image=Image.open(imagePath)
		for orientation in ExifTags.TAGS.keys():
			if ExifTags.TAGS[orientation]=='Orientation':
				break
		exif=dict(image._getexif().items())

		if exif[orientation] == 3:
			image=image.rotate(180, expand=True)
		elif exif[orientation] == 6:
			image=image.rotate(270, expand=True)
		elif exif[orientation] == 8:
			image=image.rotate(90, expand=True)
			
		image.save(imagePath)
		image.close()
		
	except (AttributeError, KeyError, IndexError):
		print (" [ Warning ] : No hay datos Exif en la imagen :"+str(imagePath))
		pass

	
def getExifData(imagePath,debug=False):
	"""
	Obtenemos los datos de Exif de las imagenes
	"""
	try:
		for (k,v) in Image.open(imagePath)._getexif().iteritems():
			print '%s = %s' % (TAGS.get(k), v)
	except (AttributeError, KeyError, IndexError):
		print (" [ Warning ] : No hay datos Exif en la imagen :"+str(imagePath))
		pass

def rotateImage(img,degrees,debug=False):
	"""
	Girar la imagen un numero de grados
	"""
	if ( debug ):
		print (" * Giremos la imagen : "+str(degrees)+" Grados")
	
	# grab the dimensions of the image and calculate the center
	# of the image
	(h, w) = img.shape[:2]
	center = (w / 2, h / 2)
	# rotate the image by 180 degrees
	M = cv2.getRotationMatrix2D(center, degrees, 1.0)
	rotated_img = cv2.warpAffine(img, M, (w, h))
	return rotated_img

def detectFaces(img,debug=False):
	"""
	Metodo aislado de deteccion de caras
	"""
	# Create haarCascade
	faceCascade = cv2.CascadeClassifier(cascPath)
	
	faces=[]
	gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
	faces = faceCascade.detectMultiScale(
			gray,
			scaleFactor=1.1,
			minNeighbors=5,
			minSize=(30, 30),
			flags = cv2.cv.CV_HAAR_SCALE_IMAGE
	)
	return faces


def makeCarnet(imagePath,debug=False):
	"""
	Genera un carnet a partir de cada una de las caras que se encuentran
	en la imagen, en caso de no encontrar caras, gira la imagen hasta que
	encuentra o en su defecto ha realizado una vuelta completa.
	"""
	
	nombre_JPG=os.path.basename(imagePath)
	ruta_carnet=os.path.dirname(imagePath)
	nombre_jpg,aux=os.path.splitext(nombre_JPG)
	basename_fichero_carnet=str(nombre_jpg)+"_carnet"
	
	if (debug):
		print("\n\n\n")
		
	print(" [ Procesando "+imagePath+" ]")
	
	if (debug):
			print(" * Datos ->\n \t* Nombre : "+nombre_JPG+"\n \t* Path : "+ruta_carnet+"\n \t* Carnet : "+basename_fichero_carnet)

	# Read the image
	img = cv2.imread(imagePath)
	img_scaled = scaleImage(img,debug)
	
	# Detect faces
	faces=detectFaces(img_scaled,debug)

	print (" \t[ Encontradas {0} cara/s ! ] ".format(len(faces)))

	# Girar la imagen en busca de fotos en los giros
	giro=360
	if (len(faces) ==0 ):
		while (giro>=90 ):
			giro=giro-90
			img_scaled=rotateImage(img_scaled,giro,debug)
			faces = detectFaces(img_scaled,debug)

			if (debug):
				print (" \t[ DEBUG ] : Al girar "+str(giro)+" grados hemos encontradas {0} cara/s ! ".format(len(faces)))

		
	if (len(faces) > 1):
		print(" \t[ Warning ] : Mas de una cara detectada -> Generando varias fotos")	
	
	aux=0
	# Operamos con las caras
	for (x, y, w, h) in faces:
		# Dibujamos un rectangulo alrededor
		
		# Factores de recorte
		factorAltura = 90
		factorAnchura= 50
		
		#cv2.rectangle(img_scaled, (x, y), (x+w, y+h), (255, 0, 0), 2)
		#cv2.rectangle(img_scaled, (int(x-(factorAnchura+10)), int(y-(factorAltura+10))), (int(x+w+factorAnchura), int(y+h+factorAltura)), (0, 255, 0), 2)
		
		alto=((y+h+factorAltura)-(y-(factorAltura+10)))
		ancho=((x+w+factorAnchura)-(x-(factorAnchura+10)))
		
		print(" Ancho -> "+str(ancho) + " y Alto -> "+str(alto))
		proporcion=(float(ancho) / float(alto))
		
		while (proporcion >0.8):
			
			factorAltura = factorAltura+10
			#cv2.rectangle(img_scaled, (int(x-(factorAnchura+10)), int(y-(factorAltura+10))), (int(x+w+factorAnchura), int(y+h+factorAltura)), (0, 255, 0), 2)

			alto=((y+h+factorAltura)-(y-(factorAltura+10)))
			ancho=((x+w+factorAnchura)-(x-(factorAnchura+10)))

			print(" Ancho -> "+str(ancho) + " y Alto -> "+str(alto))
			proporcion=(float(ancho) / float(alto))
		
		print(" [DEBUG] La proporcion es :"+str(proporcion))
		
		# Recortamos
		#showImage(img_scaled)
		#sys.exit(0)
		
		# WiP
		
		if (aux != 0):
			basename_fichero_carnet=basename_fichero_carnet+"_"+str(aux)
		
		img_crop=img_scaled[y-(factorAltura+10):y+h+factorAltura,x-(factorAnchura+10):x+w+factorAnchura]
		
		cv2.imwrite(ruta_carnet+"/"+basename_fichero_carnet+".jpg",img_crop)
		aux=int(aux)+1
		
		print(" [ Carnet : "+ruta_carnet+"/"+basename_fichero_carnet+".jpg")
		


if __name__ == "__main__":
	
	# Obtenemos algunos parametros interesantes
	accion=sys.argv[1]
	imagePath = sys.argv[2]	
	try:
		debugFlag = sys.argv[3]
		if (debugFlag == "-d"):
			debug=True
			print(" * [ DEBUG MODE ON ] ")
	except Exception as e:
			print(" * [ DEBUG MODE OFF ] ")
			debug=False
	
	# Operaciones acerca de los argumentos		
	sanityChecks(imagePath)
		
	if (accion == "-s"):
		img=cv2.imread(imagePath,debug)
		img_scaled=scaleImage(img,scaled_factor)
		showImage(img_scaled)
			
	elif (accion == "-r90"):
		img=cv2.imread(imagePath,debug)
		img_rotated=rotateImage(img,90,debug)
		cv2.imwrite(imagePath,img_rotated)
			
	elif (accion == "-r180"):
		img=cv2.imread(imagePath,debug)
		img_rotated=rotateImage(img,180,debug)
		cv2.imwrite(imagePath,img_rotated)
	
	elif (accion == "-r270"):
		img=cv2.imread(imagePath,debug)
		img_rotated=rotateImage(img,270,debug)
		cv2.imwrite(imagePath,img_rotated)
		
	elif (accion == "-c"):
		rotateByExif(imagePath,debug)
		makeCarnet(imagePath,debug)
		
	elif (accion == "-i"):
		getExifData(imagePath,debug)
			
	else :
		showUsage()
		sys.exit(1)
	



